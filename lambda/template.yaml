AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    lambda

    Sample SAM Template for lambda

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Timeout: 30

Parameters:
    FaceImageBucket:
        Type: String
        Description: 顔写真を保存するS3バケット名
    Prefix:
        Type: String
        Description: 通知対象のファイルのPrefix(フォルダ等)
    FaceCollectionId:
        Type: String
        Description: 顔コレクションのID

Resources:
    FaceRegisterLambdaFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: src/batch/faceRegister/
            Handler: app.lambdaHandler
            MemorySize: 1024
            Role: !GetAtt FaceRegisterLambdaIAMRole.Arn
            Runtime: nodejs18.x
            Architectures:
                - x86_64
            Environment:
                Variables:
                    FACE_COLLECTION_ID: !Ref FaceCollectionId
        Metadata: # Manage esbuild properties
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: 'es2020'
                Sourcemap: true
                EntryPoints:
                    - app.ts

    FaceRegisterLambdaInvokePermission:
        Type: 'AWS::Lambda::Permission'
        Properties:
            FunctionName: !GetAtt FaceRegisterLambdaFunction.Arn
            Action: 'lambda:InvokeFunction'
            Principal: s3.amazonaws.com
            SourceAccount: !Ref 'AWS::AccountId'
            SourceArn: !Sub 'arn:aws:s3:::${FaceImageBucket}'

    FaceRegisterLambdaIAMRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - 'sts:AssumeRole'
            Path: /
            ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
            Policies:
                - PolicyName: root
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - 's3:GetBucketNotification'
                                - 's3:PutBucketNotification'
                            Resource: !Sub 'arn:aws:s3:::${FaceImageBucket}'
                          - Effect: Allow
                            Action:
                                - 'logs:CreateLogGroup'
                                - 'logs:CreateLogStream'
                                - 'logs:PutLogEvents'
                            Resource: 'arn:aws:logs:*:*:*'
                          - Effect: Allow
                            Action:
                                - rekognition:IndexFaces
                            Resource: !Sub 'arn:aws:rekognition:ap-northeast-1:591885957817:collection/${FaceCollectionId}'

    CustomResourceLambdaFunction:
        Type: 'AWS::Lambda::Function'
        Properties:
            Handler: index.lambda_handler
            Role: !GetAtt FaceRegisterLambdaIAMRole.Arn
            Code:
                ZipFile: |

                    from __future__ import print_function
                    import json
                    import boto3
                    import cfnresponse

                    SUCCESS = "SUCCESS"
                    FAILED = "FAILED"

                    print('Loading function')
                    s3 = boto3.resource('s3')

                    def lambda_handler(event, context):
                        print("Received event: " + json.dumps(event, indent=2))
                        responseData={}
                        try:
                            if event['RequestType'] == 'Delete':
                                print("Request Type:",event['RequestType'])
                                Bucket=event['ResourceProperties']['Bucket']
                                delete_notification(Bucket)
                                print("Sending response to custom resource after Delete")
                            elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                                print("Request Type:",event['RequestType'])
                                LambdaArn=event['ResourceProperties']['LambdaArn']
                                Bucket=event['ResourceProperties']['Bucket']
                                Prefix=event['ResourceProperties']['Prefix']
                                add_notification(LambdaArn, Bucket, Prefix)
                                responseData={'Bucket':Bucket}
                                print("Sending response to custom resource")
                            responseStatus = 'SUCCESS'
                        except Exception as e:
                            print('Failed to process:', e)
                            responseStatus = 'FAILED'
                            responseData = {'Failure': 'Something bad happened.'}
                        cfnresponse.send(event, context, responseStatus, responseData)

                    def add_notification(LambdaArn, Bucket, Prefix):
                        bucket_notification = s3.BucketNotification(Bucket)
                        response = bucket_notification.put(
                            NotificationConfiguration={
                            'LambdaFunctionConfigurations': [
                                {
                                    'LambdaFunctionArn': LambdaArn,
                                    'Events': [
                                        's3:ObjectCreated:*'
                                    ],
                                    'Filter': {'Key': {'FilterRules': [
                                    {'Name': 'Prefix', 'Value': Prefix}
                                    ]}}
                                }
                            ]
                            }
                        )
                        print("Put request completed....")

                    def delete_notification(Bucket):
                        bucket_notification = s3.BucketNotification(Bucket)
                        response = bucket_notification.put(
                            NotificationConfiguration={}
                        )
                        print("Delete request completed....")
            Runtime: python3.9
            Timeout: 50

    S3FacesRegisterLambdaTrigger:
        Type: 'Custom::LambdaTrigger'
        DependsOn: FaceRegisterLambdaInvokePermission
        Properties:
            ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
            LambdaArn: !GetAtt FaceRegisterLambdaFunction.Arn
            Bucket: !Ref FaceImageBucket
            Prefix: !Ref Prefix
